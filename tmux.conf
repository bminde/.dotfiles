# # Use vi keys
set -gw mode-keys vi

# # don't require changing to normal mode to traverse command history
# bind-key -t vi-edit Up   history-up
# bind-key -t vi-edit Down history-down
# set-option -g history-limit 10000

# Configure your default shell
set -g default-shell $SHELL

# Override the default command, use `reattach-to-user-namespace` for everything.
# Prerequesite: `brew install reattach-to-user-namespace`
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# # so you don't end up with window numbers like: 0 1 4 5 6
set-option -g renumber-windows on

# # Mouse support
set -g mouse on

# # 256 color support
set -g default-terminal "screen-256color"

# # Start window numbers from 1
set -g base-index 1

# # set escape time so vim is responsive inside tmux
set -g escape-time 1

# # prefix r: reload tmux config
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# # make new panes and windows use the pwd
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# # smart pane switching with awareness of vim splits
# # makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# # providing the same behavior as ctrl-j and ctrl-k when navigating ctrl-p
# # results inside vim.

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


# # resising panes
# fine adjustment (1 or 2 cursor cells per bump)
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# coarse adjustment (5 or 10 cursor cells per bump)
# NOTE conflicts with mac shortcuts
# bind -n C-Left resize-pane -L 10
# bind -n C-Right resize-pane -R 10
# bind -n C-Down resize-pane -D 5
# bind -n C-Up resize-pane -U 5

# # use `<prefix> [` to enter copy-mode
# bind-key [ copy-mode
# unbind-key C-[
# bind-key ] paste-buffer

# # use 'v' to begin selection in copy mode, similar entering visual mode in Vim
# bind-key -t vi-copy v begin-selection

# # use 'y' to yank selected text to system clipboard in copy mode, similar to
# # yanking from visual selection in Vim
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# # Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# # break pane into new window
bind-key b break-pane -d

# # Status Bar
set-option -g status-interval 1

# set -g status-utf8 on

# # visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# # make iterm window/tab name reflect tmux session
set-option -g set-titles on
set-option -g set-titles-string '#S'

# # session navigation
# bind-key C-j choose-tree
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# prompted join-pane
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

bind-key C-b send-keys 'tat && exit' 'C-m'
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# # quick panes - closes when prosess ends
# nvAlt/tekst
bind-key n split-window -h -c ~/Dropbox/tekst "vim +CtrlP"
# wiki
bind-key w split-window -h -c ~/Dropbox/tekst/wiki "vim +CtrlP"
# dotfiles
bind-key . split-window -h -c ~/.dotfiles "vim +CtrlP"

# Simplify status bar display.
set -g status-left-length 40
set -g status-fg "colour8"
set -g status-bg "colour11"
set -g status-left '[#S] '
set -g status-right " #(date '+%a, %d. %b - %I:%M') "

# This tmux statusbar config was created by tmuxline.vim
# on Tue, 15 Aug 2017

# set -g status-justify "left"
# set -g status "on"
# set -g status-attr "none"
# set -g message-command-bg "colour14"
# set -g status-left-length "100"
# set -g pane-active-border-fg "colour11"
# set -g status-bg "colour7"
# set -g message-command-fg "colour7"
# set -g pane-border-fg "colour14"
# set -g message-bg "colour14"
# set -g status-left-attr "none"
# set -g status-right-attr "none"
# set -g status-right-length "100"
# set -g message-fg "colour7"
# setw -g window-status-fg "colour14"
# setw -g window-status-attr "none"
# setw -g window-status-activity-bg "colour7"
# setw -g window-status-activity-attr "none"
# setw -g window-status-activity-fg "colour11"
# setw -g window-status-separator ""
# setw -g window-status-bg "colour7"
# set -g status-left "#[fg=colour7,bg=colour11,bold] #S #[fg=colour11,bg=colour7,nobold,nounderscore,noitalics]"
# set -g status-right "#[fg=colour14,bg=colour7,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour14] %H:%M  %d.%m.%Y #[fg=colour11,bg=colour14,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour11] #h "
# setw -g window-status-format "#[fg=colour14,bg=colour7] #I #[fg=colour14,bg=colour7] #W "
# setw -g window-status-current-format "#[fg=colour7,bg=colour14,nobold,nounderscore,noitalics]#[fg=colour7,bg=colour14] #I #[fg=colour7,bg=colour14] #W #[fg=colour14,bg=colour7,nobold,nounderscore,noitalics]"
