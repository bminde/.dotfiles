set -g default-terminal "screen-256color"
set -g terminal-overrides ',xterm-256color:Tc'
set-option -g status-position bottom
set-window-option -g xterm-keys on
bind-key -n S-Up set-option -g status
bind-key -n S-Down set-option -g status
bind-key -n S-Left previous-window
bind-key -n S-Right next-window
set-option -g status-fg yellow
set-option -g status-bg default
set-option -g status-attr default
set-window-option -g window-status-fg "#666666"
set-window-option -g window-status-bg default
set-window-option -g window-status-attr default
set-window-option -g window-status-current-fg red
set-window-option -g window-status-current-bg default
set-window-option -g window-status-current-attr default
set -g pane-border-bg default
set -g pane-border-fg "#666666"
set -g pane-active-border-fg "#666666"
set -g pane-active-border-bg default
set-option -g message-fg white
set-option -g message-bg black
set-option -g message-attr bright
set -g status-left "#S  "
set -g status-justify left
set -g window-status-format " #W "
set -g window-status-current-format " #W "
set -g status-right " "

set-option -g allow-rename off

# # Use vi keys
set -gw mode-keys vi

# # # don't require changing to normal mode to traverse command history
# # bind-key -t vi-edi, Up   history-up
# # bind-key -t vi-edit Down history-down
# # set-option -g history-limit 10000

# # Configure your default shell
set -g default-shell $SHELL

# # Override the default command, use `reattach-to-user-namespace` for everything.
# # If we're on a mac
# # Prerequesite: `brew install reattach-to-user-namespace`
if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'

# # # so you don't end up with window numbers like: 0 1 4 5 6
set-option -g renumber-windows on

# # # Start window numbers from 1
set -g base-index 1

# # # set escape time so vim is responsive inside tmux
set -g escape-time 1

# # # prefix r: reload tmux config
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# # # make new panes and windows use the pwd
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# # # smart pane switching with awareness of vim splits
# # # makes ctrl-j and ctrl-k navigate fzf search results when fzf active in pane
# # # providing the same behavior as ctrl-j and ctrl-k when navigating ctrl-p
# # # results inside vim.

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

is_fzf="ps -o state= -o comm= -t '#{pane_tty}' \
  | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?fzf$'"

bind -n C-h run "($is_vim && tmux send-keys C-h) || \
                 tmux select-pane -L"

bind -n C-j run "($is_vim && tmux send-keys C-j)  || \
                 ($is_fzf && tmux send-keys C-j) || \
                 tmux select-pane -D"

bind -n C-k run "($is_vim && tmux send-keys C-k) || \
                 ($is_fzf && tmux send-keys C-k)  || \
                 tmux select-pane -U"

bind -n C-l run "($is_vim && tmux send-keys C-l) || \
                 tmux select-pane -R"

bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"


# # # resising panes
# # fine adjustment (1 or 2 cursor cells per bump)
# bind -n S-Left resize-pane -L 2
# bind -n S-Right resize-pane -R 2
# bind -n S-Down resize-pane -D 1
# bind -n S-Up resize-pane -U 1

# coarse adjustment (5 or 10 cursor cells per bump)
# NOTE conflicts with mac shortcuts
# bind -n C-Left resize-pane -L 10
# bind -n C-Right resize-pane -R 10
# bind -n C-Down resize-pane -D 5
# bind -n C-Up resize-pane -U 5

# # # use `<prefix> [` to enter copy-mode
# # bind-key [ copy-mode
# # unbind-key C-[
# # bind-key ] paste-buffer

# # use 'v' to begin selection in copy mode, similar entering visual mode in Vim
# bind-key -t vi-copy v begin-selection

# # use 'y' to yank selected text to system clipboard in copy mode, similar to
# # yanking from visual selection in Vim
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# # Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# # break pane into new window
bind-key b break-pane -d

# # session navigation
# bind-key C-j choose-tree
bind C-j split-window -v "tmux list-sessions | sed -E 's/:.*$//' | grep -v \"^$(tmux display-message -p '#S')\$\" | fzf --reverse | xargs tmux switch-client -t"

# # prompted join-pane
bind-key j command-prompt -p "join pane from: "  "join-pane -h -s '%%'"

# easily swap a pane (targeted by pane number) with the current pane
bind-key s display-panes\; command-prompt -p "pane #: "  "swap-pane -t '%%'"

# bind-key C-b send-keys 'tat && exit' 'C-m'
# bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'

# # quick panes - closes when prosess ends
# nvAlt/tekst
bind-key n split-window -h -c ~/Dropbox/tekst "vim +CtrlP"
# wiki
bind-key w split-window -h -c ~/Dropbox/tekst/wiki "vim +CtrlP"
# dotfiles
bind-key . split-window -h -c ~/.dotfiles "vim +CtrlP"

# # List of plugins
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
